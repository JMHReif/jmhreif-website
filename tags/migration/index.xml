<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>migration on Jennifer Reif</title><link>https://jmhreif.com/tags/migration/</link><description>Recent content in migration on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jan 2024 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/tags/migration/index.xml" rel="self" type="application/rss+xml"/><item><title>How to migrate Homebrew from Intel chip installation to Apple Silicon</title><link>https://jmhreif.com/blog/20240104-brew-migrate-silicon/</link><pubDate>Thu, 04 Jan 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/20240104-brew-migrate-silicon/</guid><description>Photo credit I have been using an Apple M1 laptop since autumn of 2021, but I just recently came across an issue that surprised me. It seems I hadn’t converted Homebrew (a package manager for macOS) for compatibility with Apple Silicon. I mostly use Homebrew to install packages I rarely use (such as Ruby or Python libraries), so perhaps that’s why I hadn’t noticed. However, this issue surfaced because I tried to install a Python package (Poetry) to work on a generative AI project, and it was looking for Python in the wrong place.</description></item><item><title>How to migrate Homebrew from Intel chip installation to Apple Silicon</title><link>https://jmhreif.com/blog/brew-migrate-silicon/</link><pubDate>Thu, 04 Jan 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/brew-migrate-silicon/</guid><description>Photo credit I have been using an Apple M1 laptop since autumn of 2021, but I just recently came across an issue that surprised me. It seems I hadn’t converted Homebrew (a package manager for macOS) for compatibility with Apple Silicon. I mostly use Homebrew to install packages I rarely use (such as Ruby or Python libraries), so perhaps that’s why I hadn’t noticed. However, this issue surfaced because I tried to install a Python package (Poetry) to work on a generative AI project, and it was looking for Python in the wrong place.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 3</title><link>https://jmhreif.com/blog/migrate-sdn-part3/</link><pubDate>Wed, 22 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part3/</guid><description>Photo credit You may have heard quite a bit of buzz around reactive programming or reactive principles in recent months or years. Some people say it is the future, while others prefer their existing monoliths. So what is all the fuss actually about? What is reactive? Is it beneficial?
As with all things in life, it depends. :) Remember, that technical decisions are often large investments of time - resources to create it and/or maintain for lengths of time.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 2</title><link>https://jmhreif.com/blog/migrate-sdn-part2/</link><pubDate>Thu, 09 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part2/</guid><description>Photo credit Our previous post (Part 1) on this topic introduced us to Spring Data Neo4j and showed the architectural differences between version 5 and the latest version 6. This post begins the migration process by taking a Spring Data Neo4j 5 application with OGM and upgrades to the dependencies and syntax changes of Spring Data Neo4j 6.
Without further ado, let’s dive in!
Current application overview The code for today’s migration is a specific branch in the migration Github repository.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 1</title><link>https://jmhreif.com/blog/migrate-sdn-part1/</link><pubDate>Thu, 12 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part1/</guid><description>Photo credit A major upgrade to Spring Data Neo4j was released at the end of last year as part of the Spring Data release train. If you were involved in Spring Data and Neo4j news before that, you may have seen hints of this coming with the SDN/RX library entering the scene in late 2019. The library brought with it a lighter footprint, as well as a more straightforward implementation of features to reduce confusion and errors (therefore also improving efficiency) in development and production.</description></item></channel></rss>