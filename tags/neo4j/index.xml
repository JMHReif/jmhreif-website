<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>neo4j on Jennifer Reif</title><link>https://jmhreif.com/tags/neo4j/</link><description>Recent content in neo4j on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 Jan 2025 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/tags/neo4j/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Data Neo4j: How to update an entity, Part 2</title><link>https://jmhreif.com/blog/2025/sdn-update-methods/</link><pubDate>Fri, 17 Jan 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/sdn-update-methods/</guid><description>Photo credit After working on a new online Spring Data Neo4j course, I learned a couple more things about updating an entity. The course required a different set of scenarios than outlined in my previous SDN update blog post, so I wanted to cover those scenarios, as well.
Spring save() method First up is the out-of-the-box save() method that is provided by Spring as a default. This method takes an input of the entity object you want to save to the database.</description></item><item><title>Gear Up for NODES 2024: What to Know</title><link>https://jmhreif.com/blog/2024/gear-up-nodes-2024/</link><pubDate>Wed, 18 Sep 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/gear-up-nodes-2024/</guid><description>Photo credit The NODES 2024 conference is approaching fast, and we have a lot of exciting activities, including talks, workshops, and more. Here’s what you need to know to get ready for NODES 2024.
What is NODES? NODES is a free, virtual conference run by Neo4j for developers, data scientists, and other technical roles who want to learn more about graph databases and how they can be used to solve complex problems.</description></item><item><title>Press the Easy Button: Organize a Virtual Conference Schedule with a Graph Database</title><link>https://jmhreif.com/blog/2024/nodes-2024-schedule/</link><pubDate>Mon, 19 Aug 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/nodes-2024-schedule/</guid><description>Photo credit Every year, Neo4j hosts the virtual event NODES 2024 - a free, technical event spanning global timezones and a variety of graph-related topics. This is one of my favorite events of the year, but it doesn’t happen without countless hours of planning and work to make it valuable to the graph community.
This year, my colleague and I were put in charge of organizing the schedule, determining how sessions are lined up between the start and end time of the event.</description></item><item><title>Spring AI Upgrade: Changes for Applications from 0.8 to 1.0</title><link>https://jmhreif.com/blog/2024/spring-ai-update-10/</link><pubDate>Mon, 22 Jul 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-update-10/</guid><description>Photo credit Migrating an application always feels a bit daunting, and that was the way I felt when I looked at the Spring AI 1.0 milestone release.
However, the upgrade didn’t make as many major shifts as anticipated. This guide will help you upgrade your Spring AI application from version 0.8 to 1.0 and explain why each change is needed. Changes include some naming shifts, configuration options, and more.</description></item><item><title>How to Run Neo4j on Kubernetes</title><link>https://jmhreif.com/blog/2024/kubernetes-neo4j/</link><pubDate>Thu, 13 Jun 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/kubernetes-neo4j/</guid><description>Photo credit For an upcoming event, I was asked to give a demo of how to run Neo4j on Kubernetes. I had very little experience with Kubernetes, so I decided to document my journey for later reference.
What is Kubernetes? Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It was originally developed by Google and is now maintained by the Cloud Native Computing Foundation.</description></item><item><title>GenAI Starter Kit: Everything You Need to Build an Application with Spring AI in Java</title><link>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</link><pubDate>Thu, 23 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</guid><description>Photo credit There are so many options when it comes to languages, frameworks, and tools for building generative AI (GenAI) applications. When you are just getting started, these decisions and figuring out how to integrate everything can be overwhelming.
My team has been working on some pre-packaged solutions to make this process easier by providing starter kit projects with a few key technologies. One of those is the topic of today’s post - building a GenAI application with Spring AI in Java.</description></item><item><title>Spring AI: How to Write GenAI Applications with Java</title><link>https://jmhreif.com/blog/2024/spring-ai-app/</link><pubDate>Wed, 01 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-app/</guid><description>Photo credit Generative AI (GenAI) is currently a hot topic in the tech world. It’s a subset of artificial intelligence that focuses on creating new content, such as text, images, or music. One popular type of GenAI component is the Large Language Model (LLM), which can generate human-like text based on a prompt. Retrieval-Augmented Generation (RAG) is a technique that enhances the accuracy and reliability of generative AI models by grounding them in external knowledge sources.</description></item><item><title>Cypher Sleuthing: How to Get Data Types of Properties in Neo4j</title><link>https://jmhreif.com/blog/2024/cypher-property-data-types/</link><pubDate>Tue, 12 Mar 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/cypher-property-data-types/</guid><description>Photo credit It’s been awhile since I wrote a Cypher Sleuthing post, but I’m back with a new one! This time, I’m going to show you how to find the data types of properties in Neo4j.
I frequently want to find out the data type of a property so that I can map it in an application (in Java). I can never remember off the top of my head, and when I Google the question, the results are often outdated (here’s the answer post, but the syntax is old).</description></item><item><title>Container Upgrade - Experiences Updating Three Databases</title><link>https://jmhreif.com/blog/2021/docker-container-upgrade/</link><pubDate>Fri, 15 Oct 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/docker-container-upgrade/</guid><description>Photo credit *Updated Dec 16, 2021
I created a demo project a couple of years ago that included a lot of technical setup - containers, data import, queries, and such. I presented it for a conference or two, and while it was one of my favorite projects, it was a lot of preparation for the live demo.
I recently rediscovered the project, and submitted it to a couple of conferences.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 3</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part3/</link><pubDate>Wed, 22 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part3/</guid><description>Photo credit You may have heard quite a bit of buzz around reactive programming or reactive principles in recent months or years. Some people say it is the future, while others prefer their existing monoliths. So what is all the fuss actually about? What is reactive? Is it beneficial?
As with all things in life, it depends. :) Remember, that technical decisions are often large investments of time - resources to create it and/or maintain for lengths of time.</description></item><item><title>Java 17: Explore the newly-released Java version in a graph database!</title><link>https://jmhreif.com/blog/2021/java17-graph-explore/</link><pubDate>Tue, 14 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/java17-graph-explore/</guid><description>Photo credit I’ve recently been playing around with a JDK data set that details the historical library changes of the versions of Java, and with the release of Java 17 today (September 14!), I thought it would be a good time to explore this data set a bit more with others. I invite you to join me and to continue with additional exploration and projects!
The data set is pulled from a Marc Hofman’s Github repository for the Java Almanac that also feeds a web browser version for the javaalmanac.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 2</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part2/</link><pubDate>Thu, 09 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part2/</guid><description>Photo credit Our previous post (Part 1) on this topic introduced us to Spring Data Neo4j and showed the architectural differences between version 5 and the latest version 6. This post begins the migration process by taking a Spring Data Neo4j 5 application with OGM and upgrades to the dependencies and syntax changes of Spring Data Neo4j 6.
Without further ado, let’s dive in!
Current application overview The code for today’s migration is a specific branch in the migration Github repository.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 1</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part1/</link><pubDate>Thu, 12 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part1/</guid><description>Photo credit A major upgrade to Spring Data Neo4j was released at the end of last year as part of the Spring Data release train. If you were involved in Spring Data and Neo4j news before that, you may have seen hints of this coming with the SDN/RX library entering the scene in late 2019. The library brought with it a lighter footprint, as well as a more straightforward implementation of features to reduce confusion and errors (therefore also improving efficiency) in development and production.</description></item><item><title>Create a Data Marvel with Spring Data Neo4j</title><link>https://jmhreif.com/blog/2021/create-data-marvel-sdn/</link><pubDate>Mon, 02 Aug 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/create-data-marvel-sdn/</guid><description>Photo credit I have had a couple of Github projects demonstrating bits of functionality for Spring Data Neo4j, but they had last been updated in 2020 when the new Spring Data Neo4j 6 was still a beta version known as SDN/RX. Since there have been several changes since then, I thought I would give the projects a refresh and make them current.
Project code:
SDN Marvel (imperative)
SDN(rx) Marvel (reactive)</description></item></channel></rss>