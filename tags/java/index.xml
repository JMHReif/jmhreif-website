<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Jennifer Reif</title><link>https://jmhreif.com/tags/java/</link><description>Recent content in java on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Jan 2022 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Journeys in Java, Level 2: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level2/</link><pubDate>Thu, 27 Jan 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level2/</guid><description>Photo credit In my last blog post, we began building microservices in Java with two Spring Boot applications, passing a &amp;#34;Hello, World!&amp;#34; string from one application to the other. We focused on reduced complexity, minimum previous knowledge, and few components. Next, we can slowly add pieces that simulate microservices projects in the real world.
One way to do this is by adding a data domain. Applications often model some scenario in the real world such as maintaining office building temperatures, finding connected devices on a network, or recommending a tv show.</description></item><item><title>Journeys in Java, Level 1: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level1/</link><pubDate>Tue, 21 Dec 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level1/</guid><description>Photo credit Microservices have been used and deployed in businesses and projects for awhile, and there is plenty of content available for architecting them into a system. For my next project, I want to dive into the world of microservices and begin building my own little virtual empire from different kinds of services to find out the complexities, best practices, power, and trouble that comes with them. I will share all my learnings along the way, as well.</description></item><item><title>Java 17: Explore the newly-released Java version in a graph database!</title><link>https://jmhreif.com/blog/java17-graph-explore/</link><pubDate>Tue, 14 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java17-graph-explore/</guid><description>Photo credit I’ve recently been playing around with a JDK data set that details the historical library changes of the versions of Java, and with the release of Java 17 today (September 14!), I thought it would be a good time to explore this data set a bit more with others. I invite you to join me and to continue with additional exploration and projects!
The data set is pulled from a Marc Hofman’s Github repository for the Java Almanac that also feeds a web browser version for the javaalmanac.</description></item><item><title>In the Language Wars, Java Holds Its Own</title><link>https://jmhreif.com/blog/java-holds-its-own/</link><pubDate>Mon, 18 Nov 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java-holds-its-own/</guid><description>We all pick our favorites and downplay other options (colors, cars, sports team, etc.). Programming language choice is not exempt. Whether it’s the one we are most comfortable with or the one that got us a job, we cling to that choice.
Today, we will focus on Java. There are perfectly valid complaints and praises for this language, and we will cover them. As always, these are my experiences, so others may see things differently.</description></item></channel></rss>