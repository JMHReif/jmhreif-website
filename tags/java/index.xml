<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Jennifer Reif</title><link>https://jmhreif.com/tags/java/</link><description>Recent content in java on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Aug 2023 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>ServiceUnavailableException: Connection to the database terminated.</title><link>https://jmhreif.com/blog/sdn-service-unavailable-exception/</link><pubDate>Tue, 15 Aug 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/sdn-service-unavailable-exception/</guid><description>Photo credit I was working on a Spring Data Neo4j example application for a community user’s question, and I kept running into the error below when I defined bidirectional relationship in the domain classes.
2023-08-10T13:00:17.341-05:00 ERROR 98493 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.TransientDataAccessResourceException: Server at 408637a4.databases.neo4j.io:7687 is no longer available; Error code &amp;#39;N/A&amp;#39;] with root cause org.</description></item><item><title>How to Create a Spring Boot Application to Retrieve Data from Evernote</title><link>https://jmhreif.com/blog/evernote-api-app/</link><pubDate>Tue, 01 Aug 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/evernote-api-app/</guid><description>Photo credit I recently started work on a joint project with my colleague, Jason Koo. For this project, we want to import data from second brain apps (such as Obsidian, Notion, Evernote, etc) to Neo4j. Since I use Evernote, I was tasked with getting my notes out of Evernote. In this post, I will show you how to use the Evernote API and SDK in a Spring Boot application to retrieve data from Evernote.</description></item><item><title>Spring Data Neo4j: How to update an entity</title><link>https://jmhreif.com/blog/sdn-cypher-update-entity/</link><pubDate>Thu, 01 Jun 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/sdn-cypher-update-entity/</guid><description>Photo credit As I was incorporating Kafka to my microservices project, I ran across some trouble updating an entity in Neo4j using Spring Data Neo4j.
My data set contains books, authors, book reviews, and users. Based on a new review getting entered into the system, I want to create that review, and then update the related Book entity with an incremented review count and calculate a new average rating.</description></item><item><title>NoSuchBeanDefinitionException: No matching TransactionManager bean found for qualifier 'reactiveTransactionManager'</title><link>https://jmhreif.com/blog/no-such-bean-definition-exception/</link><pubDate>Tue, 13 Dec 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/no-such-bean-definition-exception/</guid><description>Photo credit I was working on a Spring Data Neo4j microservice application to add a write method for saving a new book review to the database, when I came across the error message below.
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &amp;#39;reactiveTransactionManager&amp;#39; available: No matching TransactionManager bean found for qualifier &amp;#39;reactiveTransactionManager&amp;#39; - neither qualifier match nor bean name match! The stacktrace was long and ugly, and I had come across this error before…​but I could not remember how I had solved it.</description></item><item><title>Journeys in Java, Level 10: Service Discovery with Eureka</title><link>https://jmhreif.com/blog/microservices-level10/</link><pubDate>Tue, 01 Nov 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level10/</guid><description>Photo credit Gaining complexity in a microservices system certainly isn’t for the faint of heart (though neither is complexity in monoliths!). When there are many services that need to communicate with one another, we might need to coordinate multiple services communicating with multiple other services. We also might code for varying environments such as local, development server, or the cloud.
How do services know where to find one another?</description></item><item><title>Journeys in Java, Level 9: Docker compose all the things</title><link>https://jmhreif.com/blog/microservices-level9/</link><pubDate>Wed, 21 Sep 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level9/</guid><description>Photo credit Our microservices project contains quite a few pieces now. We have two databases, three API services, a user-view service for books, and a service to host our configuration. With so many pieces to manage, it would be nice to have something that orchestrates the individual services into a system, such as Docker Compose.
Back in our Level 5 rendition, we did exactly this for our smaller version of the project.</description></item><item><title>Journeys in Java, Level 8: Add MongoDB to Spring Cloud Config</title><link>https://jmhreif.com/blog/microservices-level8/</link><pubDate>Mon, 08 Aug 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level8/</guid><description>Photo credit In our last blog post, we used Spring Cloud Config to provide database credentials to a microservice application connecting to a cloud-hosted Neo4j database. This post will backport this concept to our existing MongoDB database instance and its related microservices.
We will add our MongoDB credentials to the config server, so that it will be the central place for both our Neo4j and MongoDB database access. However, each service only has access to the credentials that it needs to operate, which provides some level of security through &amp;#34;separation of concerns&amp;#34; (versus universal access).</description></item><item><title>Journeys in Java, Level 7: Externalize Microservice Configuration</title><link>https://jmhreif.com/blog/microservices-level7/</link><pubDate>Thu, 14 Jul 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level7/</guid><description>Photo credit Our decided next step for this project takes us in a new direction by adding externalized configuration for our applications. We already saw how to do something similar with MongoDB database credentials in Docker Compose to access a local database container, but what do we do when the database is hosted on public cloud or contains sensitive data? We probably don’t want to publish our credentials anywhere or even prevent accidental publishing.</description></item><item><title>Journeys in Java, Level 6: Build a Microservice with Neo4j</title><link>https://jmhreif.com/blog/microservices-level6/</link><pubDate>Tue, 21 Jun 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level6/</guid><description>Photo credit For our next adventure in Java microservices, we want to expand our system for book review data. While books and authors are well-suited for a document database such as MongoDB, once you add reviews to the mix, the importance of the relationships makes this project better suited for a graph database. This way, we can utilize relationships between the different entities to improve analysis based on the structure of the connections.</description></item><item><title>Journeys in Java, Level 5: Manage Microservices with Docker Compose</title><link>https://jmhreif.com/blog/microservices-level5/</link><pubDate>Thu, 21 Apr 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level5/</guid><description>Photo credit We continue building our microservices system by adding a coordination layer to handle spinning multiple services up and down. In previous blog posts, we grew from two Spring Boot applications to three applications + a database container. As we continue to scale and broaden our system, we will need something to coordinate service and ensure consistent communication (avoid human error).
We will do this through docker-compose, an orchestration tool that manages containerized applications.</description></item><item><title>Journeys in Java, Level 4: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level4/</link><pubDate>Thu, 31 Mar 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level4/</guid><description>Photo credit This blog post is the fourth iteration in a series of posts about building microservices in Java. The initial post started with a single string message passed between two locally-running applications, and we are gradually adding services and functionality along the way.
In this level 4 installment, we will add a new service that will manage book authors. It will call a database containing a data domain of books and retrieve authors and their information.</description></item><item><title>Journeys in Java, Level 3: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level3/</link><pubDate>Fri, 11 Feb 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level3/</guid><description>Photo credit We are still in the beginning stages of building microservices with Java, but we have already seen how to send and receive communications between two Spring Boot applications. In the first blog post of this series, our two applications transmitted a message string of &amp;#34;Hello, World!&amp;#34;. In the second blog post, we took it one step further by embedding a MongoDB database into our service1, added a data domain (books) with four pre-populated entries, and transmitted the Book information between the two applications.</description></item><item><title>Journeys in Java, Level 2: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level2/</link><pubDate>Thu, 27 Jan 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level2/</guid><description>Photo credit In my last blog post, we began building microservices in Java with two Spring Boot applications, passing a &amp;#34;Hello, World!&amp;#34; string from one application to the other. We focused on reduced complexity, minimum previous knowledge, and few components. Next, we can slowly add pieces that simulate microservices projects in the real world.
One way to do this is by adding a data domain. Applications often model some scenario in the real world such as maintaining office building temperatures, finding connected devices on a network, or recommending a tv show.</description></item><item><title>Journeys in Java, Level 1: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level1/</link><pubDate>Tue, 21 Dec 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level1/</guid><description>Photo credit Microservices have been used and deployed in businesses and projects for awhile, and there is plenty of content available for architecting them into a system. For my next project, I want to dive into the world of microservices and begin building my own little virtual empire from different kinds of services to find out the complexities, best practices, power, and trouble that comes with them. I will share all my learnings along the way, as well.</description></item><item><title>Java 17: Explore the newly-released Java version in a graph database!</title><link>https://jmhreif.com/blog/java17-graph-explore/</link><pubDate>Tue, 14 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java17-graph-explore/</guid><description>Photo credit I’ve recently been playing around with a JDK data set that details the historical library changes of the versions of Java, and with the release of Java 17 today (September 14!), I thought it would be a good time to explore this data set a bit more with others. I invite you to join me and to continue with additional exploration and projects!
The data set is pulled from a Marc Hofman’s Github repository for the Java Almanac that also feeds a web browser version for the javaalmanac.</description></item><item><title>In the Language Wars, Java Holds Its Own</title><link>https://jmhreif.com/blog/java-holds-its-own/</link><pubDate>Mon, 18 Nov 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java-holds-its-own/</guid><description>We all pick our favorites and downplay other options (colors, cars, sports team, etc.). Programming language choice is not exempt. Whether it’s the one we are most comfortable with or the one that got us a job, we cling to that choice.
Today, we will focus on Java. There are perfectly valid complaints and praises for this language, and we will cover them. As always, these are my experiences, so others may see things differently.</description></item></channel></rss>