<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rag on Jennifer Reif</title><link>https://jmhreif.com/tags/rag/</link><description>Recent content in rag on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Apr 2025 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/tags/rag/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro to RAG: Foundations of Retrieval Augmented Generation, part 2</title><link>https://jmhreif.com/blog/2025/intro-to-rag-pt2/</link><pubDate>Wed, 30 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/intro-to-rag-pt2/</guid><description>Photo credit In the last post, we discussed the basics of Retrieval Augmented Generation (RAG) and how it enhances the capabilities of Large Language Models (LLMs) by integrating them with external knowledge sources. We also introduced the concept of vector embeddings and their role in semantic search.
In this post, we’ll dive deeper into the different layers of RAG, including vector RAG, graph RAG, and agents. We’ll explore how these layers can be combined to create more powerful and effective AI systems.</description></item><item><title>Intro to RAG: Foundations of Retrieval Augmented Generation, part 1</title><link>https://jmhreif.com/blog/2025/intro-to-rag-foundations/</link><pubDate>Tue, 22 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/intro-to-rag-foundations/</guid><description>Photo credit Retrieval Augmented Generation (RAG) may sound complex, but it accurately represents the process of the system. RAG is a method that enhances the capabilities of Large Language Models (LLMs) by integrating them with external knowledge sources.
Each term represents a piece of the puzzle:
Retrieval - data retrieved from some external source outside the LLM (most often a database, but can include files, webpages, etc)
Augmented - &amp;#34;augmenting&amp;#34; (or adding to) an LLM’s training data.</description></item><item><title>GenAI blood, sweat, and tears: Loading data to Pinecone</title><link>https://jmhreif.com/blog/2025/vector-graph-rag/</link><pubDate>Wed, 09 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/vector-graph-rag/</guid><description>Photo credit As someone who is pretty familiar with relational and graph databases, I wanted to dig a little deeper into vector databases and understand the strengths and quirks they bring to the database table. I put together a conference abstract on vector RAG versus GraphRAG which got picked up, so I went to work building a demo and learning all I could.
I pivoted a few times along the way, but ended up with a Spring AI application that connects to both Pinecone (vector database) and Neo4j (graph database).</description></item><item><title>Spring AI Upgrade: Changes for Applications from 0.8 to 1.0</title><link>https://jmhreif.com/blog/2024/spring-ai-update-10/</link><pubDate>Mon, 22 Jul 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-update-10/</guid><description>Photo credit Migrating an application always feels a bit daunting, and that was the way I felt when I looked at the Spring AI 1.0 milestone release.
However, the upgrade didn’t make as many major shifts as anticipated. This guide will help you upgrade your Spring AI application from version 0.8 to 1.0 and explain why each change is needed. Changes include some naming shifts, configuration options, and more.</description></item><item><title>GenAI Starter Kit: Everything You Need to Build an Application with Spring AI in Java</title><link>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</link><pubDate>Thu, 23 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</guid><description>Photo credit There are so many options when it comes to languages, frameworks, and tools for building generative AI (GenAI) applications. When you are just getting started, these decisions and figuring out how to integrate everything can be overwhelming.
My team has been working on some pre-packaged solutions to make this process easier by providing starter kit projects with a few key technologies. One of those is the topic of today’s post - building a GenAI application with Spring AI in Java.</description></item><item><title>Spring AI: How to Write GenAI Applications with Java</title><link>https://jmhreif.com/blog/2024/spring-ai-app/</link><pubDate>Wed, 01 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-app/</guid><description>Photo credit Generative AI (GenAI) is currently a hot topic in the tech world. It’s a subset of artificial intelligence that focuses on creating new content, such as text, images, or music. One popular type of GenAI component is the Large Language Model (LLM), which can generate human-like text based on a prompt. Retrieval-Augmented Generation (RAG) is a technique that enhances the accuracy and reliability of generative AI models by grounding them in external knowledge sources.</description></item><item><title>Implementing RAG: How to write a graph retrieval query in LangChain</title><link>https://jmhreif.com/blog/2024/rag-demo-retrieval/</link><pubDate>Thu, 15 Feb 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/rag-demo-retrieval/</guid><description>Photo credit What is RAG? This term is used a lot in today’s technical landscape, but what does it actually mean? Here are a few definitions from various sources:
&amp;#34;Retrieval-Augmented Generation (RAG) is the process of optimizing the output of a large language model, so it references an authoritative knowledge base outside of its training data sources before generating a response.&amp;#34; - Amazon Web Services
&amp;#34;Retrieval-augmented generation (RAG) is a technique for enhancing the accuracy and reliability of generative AI models with facts fetched from external sources.</description></item></channel></rss>