<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code, Career, and Content on Jennifer Reif</title><link>https://jmhreif.com/</link><description>Recent content in Code, Career, and Content on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Aug 2022 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Journeys in Java, Level 8: Add MongoDB to Spring Cloud Config</title><link>https://jmhreif.com/blog/microservices-level8/</link><pubDate>Mon, 08 Aug 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level8/</guid><description>Photo credit In our last blog post, we used Spring Cloud Config to provide database credentials to a microservice application connecting to a cloud-hosted Neo4j database. This post will backport this concept to our existing MongoDB database instance and its related microservices.
We will add our MongoDB credentials to the config server, so that it will be the central place for both our Neo4j and MongoDB database access. However, each service only has access to the credentials that it needs to operate, which provides some level of security through &amp;#34;separation of concerns&amp;#34; (versus universal access).</description></item><item><title>Journeys in Java, Level 7: Externalize Microservice Configuration</title><link>https://jmhreif.com/blog/microservices-level7/</link><pubDate>Thu, 14 Jul 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level7/</guid><description>Photo credit Our decided next step for this project takes us in a new direction by adding externalized configuration for our applications. We already saw how to do something similar with MongoDB database credentials in Docker Compose to access a local database container, but what do we do when the database is hosted on public cloud or contains sensitive data? We probably don’t want to publish our credentials anywhere or even prevent accidental publishing.</description></item><item><title>Journeys in Java, Level 6: Build a Microservice with Neo4j</title><link>https://jmhreif.com/blog/microservices-level6/</link><pubDate>Tue, 21 Jun 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level6/</guid><description>Photo credit For our next adventure in Java microservices, we want to expand our system for book review data. While books and authors are well-suited for a document database such as MongoDB, once you add reviews to the mix, the importance of the relationships makes this project better suited for a graph database. This way, we can utilize relationships between the different entities to improve analysis based on the structure of the connections.</description></item><item><title>Journeys in Java, Level 5: Manage Microservices with Docker Compose</title><link>https://jmhreif.com/blog/microservices-level5/</link><pubDate>Thu, 21 Apr 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level5/</guid><description>Photo credit We continue building our microservices system by adding a coordination layer to handle spinning multiple services up and down. In previous blog posts, we grew from two Spring Boot applications to three applications + a database container. As we continue to scale and broaden our system, we will need something to coordinate service and ensure consistent communication (avoid human error).
We will do this through docker-compose, an orchestration tool that manages containerized applications.</description></item><item><title>Journeys in Java, Level 4: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level4/</link><pubDate>Thu, 31 Mar 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level4/</guid><description>Photo credit This blog post is the fourth iteration in a series of posts about building microservices in Java. The initial post started with a single string message passed between two locally-running applications, and we are gradually adding services and functionality along the way.
In this level 4 installment, we will add a new service that will manage book authors. It will call a database containing a data domain of books and retrieve authors and their information.</description></item><item><title>Data Tool Decision Tree: Reduce Data Cleaning Time</title><link>https://jmhreif.com/blog/data-cleaning-goodreads/</link><pubDate>Wed, 23 Mar 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/data-cleaning-goodreads/</guid><description>Photo credit My dad likes to say that cooking is another form of creativity - part art, part science - that produces something physical, edible, and enjoyable with the chef’s unique style. Programming can be similar (minus the edible part).
To learn to cook, you can take classes or read books, but the best teacher is rolling up your sleeves and experimenting yourself. When should you choose this utensil or that?</description></item><item><title>Journeys in Java, Level 3: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level3/</link><pubDate>Fri, 11 Feb 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level3/</guid><description>Photo credit We are still in the beginning stages of building microservices with Java, but we have already seen how to send and receive communications between two Spring Boot applications. In the first blog post of this series, our two applications transmitted a message string of &amp;#34;Hello, World!&amp;#34;. In the second blog post, we took it one step further by embedding a MongoDB database into our service1, added a data domain (books) with four pre-populated entries, and transmitted the Book information between the two applications.</description></item><item><title>Journeys in Java, Level 2: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level2/</link><pubDate>Thu, 27 Jan 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level2/</guid><description>Photo credit In my last blog post, we began building microservices in Java with two Spring Boot applications, passing a &amp;#34;Hello, World!&amp;#34; string from one application to the other. We focused on reduced complexity, minimum previous knowledge, and few components. Next, we can slowly add pieces that simulate microservices projects in the real world.
One way to do this is by adding a data domain. Applications often model some scenario in the real world such as maintaining office building temperatures, finding connected devices on a network, or recommending a tv show.</description></item><item><title>Journeys in Java, Level 1: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/microservices-level1/</link><pubDate>Tue, 21 Dec 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/microservices-level1/</guid><description>Photo credit Microservices have been used and deployed in businesses and projects for awhile, and there is plenty of content available for architecting them into a system. For my next project, I want to dive into the world of microservices and begin building my own little virtual empire from different kinds of services to find out the complexities, best practices, power, and trouble that comes with them. I will share all my learnings along the way, as well.</description></item><item><title>What I Learned Going from Intel to Apple Silicon</title><link>https://jmhreif.com/blog/docker-intel-to-m1/</link><pubDate>Thu, 04 Nov 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/docker-intel-to-m1/</guid><description>Photo credit Earlier this year, I received a new work laptop with the recent Apple silicon chip (versus Intel chip). The new M1 has been critically examined with avid enthusiasm and criticism, so I wasn’t sure what my outcome would be.
Thus far, it’s been positive, and I really haven’t noticed too much disruption in my work. Things have been faster, but I’m not sure whether to entirely attribute that new chip itself, or just the new machine, in general.</description></item><item><title>Container Upgrade - Experiences Updating Three Databases</title><link>https://jmhreif.com/blog/docker-container-upgrade/</link><pubDate>Fri, 15 Oct 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/docker-container-upgrade/</guid><description>Photo credit *Updated Dec 16, 2021
I created a demo project a couple of years ago that included a lot of technical setup - containers, data import, queries, and such. I presented it for a conference or two, and while it was one of my favorite projects, it was a lot of preparation for the live demo.
I recently rediscovered the project, and submitted it to a couple of conferences.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 3</title><link>https://jmhreif.com/blog/migrate-sdn-part3/</link><pubDate>Wed, 22 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part3/</guid><description>Photo credit You may have heard quite a bit of buzz around reactive programming or reactive principles in recent months or years. Some people say it is the future, while others prefer their existing monoliths. So what is all the fuss actually about? What is reactive? Is it beneficial?
As with all things in life, it depends. :) Remember, that technical decisions are often large investments of time - resources to create it and/or maintain for lengths of time.</description></item><item><title>Java 17: Explore the newly-released Java version in a graph database!</title><link>https://jmhreif.com/blog/java17-graph-explore/</link><pubDate>Tue, 14 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java17-graph-explore/</guid><description>Photo credit I’ve recently been playing around with a JDK data set that details the historical library changes of the versions of Java, and with the release of Java 17 today (September 14!), I thought it would be a good time to explore this data set a bit more with others. I invite you to join me and to continue with additional exploration and projects!
The data set is pulled from a Marc Hofman’s Github repository for the Java Almanac that also feeds a web browser version for the javaalmanac.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 2</title><link>https://jmhreif.com/blog/migrate-sdn-part2/</link><pubDate>Thu, 09 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part2/</guid><description>Photo credit Our previous post (Part 1) on this topic introduced us to Spring Data Neo4j and showed the architectural differences between version 5 and the latest version 6. This post begins the migration process by taking a Spring Data Neo4j 5 application with OGM and upgrades to the dependencies and syntax changes of Spring Data Neo4j 6.
Without further ado, let’s dive in!
Current application overview The code for today’s migration is a specific branch in the migration Github repository.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 1</title><link>https://jmhreif.com/blog/migrate-sdn-part1/</link><pubDate>Thu, 12 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/migrate-sdn-part1/</guid><description>Photo credit A major upgrade to Spring Data Neo4j was released at the end of last year as part of the Spring Data release train. If you were involved in Spring Data and Neo4j news before that, you may have seen hints of this coming with the SDN/RX library entering the scene in late 2019. The library brought with it a lighter footprint, as well as a more straightforward implementation of features to reduce confusion and errors (therefore also improving efficiency) in development and production.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 5</title><link>https://jmhreif.com/blog/cypher-sleuthing-dates-part5/</link><pubDate>Tue, 10 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-dates-part5/</guid><description>From part 1 introducing Cypher dates and formats to part 4 where we combined duration functions and temporal components to translate amounts in one unit to another unit, we have covered a lot of ground in this series! Filling in the gaps, part 2 showed us how to truncate dates for searches and use durations for adding/subtracting amounts of time, and part 3 gave us an intro to temporal components and translations within component groups.</description></item><item><title>Create a Data Marvel with Spring Data Neo4j</title><link>https://jmhreif.com/blog/create-data-marvel-sdn/</link><pubDate>Mon, 02 Aug 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/create-data-marvel-sdn/</guid><description>Photo credit I have had a couple of Github projects demonstrating bits of functionality for Spring Data Neo4j, but they had last been updated in 2020 when the new Spring Data Neo4j 6 was still a beta version known as SDN/RX. Since there have been several changes since then, I thought I would give the projects a refresh and make them current.
Project code:
SDN Marvel (imperative)</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 4</title><link>https://jmhreif.com/blog/cypher-sleuthing-dates-part4/</link><pubDate>Tue, 27 Jul 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-dates-part4/</guid><description>Photo credit *Updated Dec 15, 2021
My previous part 1, part 2, and part 3 posts on this topic introduced Cypher dates, translated formats to the Cypher-supported ISO 8601 format, calculated durations, accessed components, and translated durations to certain values.
If you read those, then this post is the next post showing how to convert durations across component categories. If you haven’t read the previous posts leading up to this one, feel free to catch up (recommend at least Part 3 as this post’s prequel) - though it isn’t required.</description></item><item><title>Speaker Resume</title><link>https://jmhreif.com/about/speaking_list/</link><pubDate>Mon, 26 Jul 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/about/speaking_list/</guid><description>This page is dedicated to Jennifer’s resume as a speaker. She has traveled the world to participate in world-class technical events with audiences large and small. Speaking provides a way to share her learnings and experiences with others and learn from theirs, as well. Many of her slide decks are available on Jennifer’s SpeakerDeck page or included in her code projects on Github, and recordings of presentations are aggregated to a YouTube playlist.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 3</title><link>https://jmhreif.com/blog/cypher-sleuthing-dates-part3/</link><pubDate>Thu, 01 Jul 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-dates-part3/</guid><description>*Updated Dec 9, 2021
My previous part 1 and part 2 posts on this topic introduced Cypher dates, translated formats to the Cypher-supported ISO 8601 format, calculated durations, and measured lengths of time. If you read those, then this post is the next step with Cypher dates on date components, component translations, and duration conversions. If you haven’t read parts 1 or 2, feel free to catch up - though this post doesn’t require the previous ones.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 2</title><link>https://jmhreif.com/blog/cypher-sleuthing-dates-part2/</link><pubDate>Mon, 26 Apr 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-dates-part2/</guid><description>*Updated Dec 9, 2021
My previous part 1 post on this topic introduced Cypher dates and translated a few other date formats to the Cypher-supported ISO 8601 format. If you read that, then this post is the next step with Cypher dates that covers durations and more. If you haven’t seen part 1, feel free to catch up - though this part 2 doesn’t necessarily require reading part 1. :)</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 1</title><link>https://jmhreif.com/blog/cypher-sleuthing-dates-part1/</link><pubDate>Fri, 09 Apr 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-dates-part1/</guid><description>No matter what database, programming language, or webpage you might be using, dates always seem to cause headaches. Different date formats require calculations between application date pickers in user-friendly formats and system dates in backend devices and data sources. Then, programming languages each have their own libraries and structures for dealing with dates, too.
This concept in the Neo4j ecosystem isn’t any less complex with Cypher (a graph query language) date formats, the APOC library date functions/procedures, and countless possible integration tools/APIs for data import and export.</description></item><item><title>In the Language Wars, Java Holds Its Own</title><link>https://jmhreif.com/blog/java-holds-its-own/</link><pubDate>Mon, 18 Nov 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/java-holds-its-own/</guid><description>We all pick our favorites and downplay other options (colors, cars, sports team, etc.). Programming language choice is not exempt. Whether it’s the one we are most comfortable with or the one that got us a job, we cling to that choice.
Today, we will focus on Java. There are perfectly valid complaints and praises for this language, and we will cover them. As always, these are my experiences, so others may see things differently.</description></item><item><title>Cypher Sleuthing: the CASE statement</title><link>https://jmhreif.com/blog/cypher-sleuthing-case-statement/</link><pubDate>Wed, 24 Jul 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-case-statement/</guid><description>I was recently working on one of our developer guides (the CSV import guide) and came across some Cypher I needed to fine-tune in the CASE statement on that page. I had some trouble finding the correct syntax, so I reached out to some Cypher experts to get some help.
As it turns out, I was looking at the Cypher CASE statement the wrong way and misunderstood its structure and design.</description></item><item><title>Cypher Sleuthing: the EAGER operator</title><link>https://jmhreif.com/blog/cypher-sleuthing-eager-operator/</link><pubDate>Wed, 24 Jul 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/cypher-sleuthing-eager-operator/</guid><description>Why is it that some query syntax seems to run faster than another when there is very little difference between the statements? Sometimes, queries will invoke what is called the eager operator in order to maintain consistent operations and avoid conflicting data changes.
It still leaves the question, though, of what does this eager operation do differently and why would it be important enough to specifically avoid in certain situations?</description></item><item><title>Getting Past Beginner Stage: How to Get to Intermediate</title><link>https://jmhreif.com/blog/how-to-get-to-intermediate/</link><pubDate>Thu, 18 Oct 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/how-to-get-to-intermediate/</guid><description>When you start a new technology or learn anything new, it might be easy to get started. There is often a lot of starter material, tutorials, guides, exercises, and entry-level project examples. Plus, you might even find blog posts, StackOverflow questions, and other types of materials to help you.
The on-boarding process for new technologies continues to get simpler and easier. But what happens when you understand and can tackle all the beginner-level materials?</description></item><item><title>How to Build a Career: Telling Your Story</title><link>https://jmhreif.com/blog/how-to-build-a-career/</link><pubDate>Fri, 31 Aug 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/how-to-build-a-career/</guid><description>Oftentimes, we tend to sell ourselves short when we are talking to interviewers, professionals, or other career authorities.
We don’t want to seem arrogant and inflate our capabilities, right? What if they don’t see the value of our journey that we see from our path, decisions, experiences, etc? There is a very fine balance between being humble and arrogant, and it is a tough one to achieve.
We all have different backgrounds, achievements, struggles, and experiences.</description></item><item><title>How Do You Know If a Graph Database Solves the Problem?</title><link>https://jmhreif.com/blog/how-do-you-know-if-graph-database-solves-the-problem/</link><pubDate>Wed, 08 Aug 2018 11:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/how-do-you-know-if-graph-database-solves-the-problem/</guid><description>One of the greatest questions to consistently badger a developer is &amp;#34;what technology should I use?&amp;#34;. The analysis from days of thought and input determines which option(s) (from an increasingly growing number) best suits the need, manages volume and demand, plans for long-term strategy, simplifies/reduces support, and gets approved by colleagues and management.
This may sound even simpler than it sometimes can be in real life. The decision’s complexity is often compounded by how much buy-in is needed, and the current constraints of existing technology and developer knowledge.</description></item><item><title>What I've Learned in 5 Years as a Developer</title><link>https://jmhreif.com/blog/five-years-as-a-developer/</link><pubDate>Wed, 23 May 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/five-years-as-a-developer/</guid><description>As I approach my 5-year anniversary in my career as a developer, I wanted to reflect on what I have learned up to this point. While I still have much to learn (one constant in life), there are some things I have found in my experiences thus far.
Everyone treks a different path filled with vastly different experiences, so you may relate to some of these or simply add to the list of possibilities you may or may not encounter along the road.</description></item><item><title>What is so exciting about a career in software development?</title><link>https://jmhreif.com/blog/career-in-software-development/</link><pubDate>Wed, 28 Mar 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/career-in-software-development/</guid><description>Photo credit What is so exciting about a career in software development? There must be something that makes the blood-shot eyes, sleepless nights, and coffee-bolstered being worthwhile. While stressing over deadlines, fixing code bugs, and balancing personal life, some part of the true developer in us keeps chugging along, having faith that the reward is far greater than each obstacle.
Whether you are a young student choosing a career in an endless array of possibilities, an individual stuck in another career looking to make a switch, or a seasoned professional trying to remind yourself of the highlights in a career of software development, I hope there is something in this post for you that encourages you to thrive in your software development career and to bask in the light at the end of each tunnel.</description></item></channel></rss>