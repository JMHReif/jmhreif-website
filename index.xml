<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code, Career, and Content on Jennifer Reif</title><link>https://jmhreif.com/</link><description>Recent content in Code, Career, and Content on Jennifer Reif</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 19 May 2025 09:00:00 -0600</lastBuildDate><atom:link href="https://jmhreif.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic OGM: Object Mapping in the Neo4j Java Driver</title><link>https://jmhreif.com/blog/2025/neo4j-java-object-mapping/</link><pubDate>Mon, 19 May 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/neo4j-java-object-mapping/</guid><description>Photo credit As of the Neo4j Java Driver 5.28.5, the driver now includes a basic object mapping feature. This allows you to map Java objects to Neo4j nodes and relationships without needing to do so manually or deal with raw results.
Note: The driver’s new object mapping is not a full-fledged Object Graph Mapping (OGM) solution. For a more comprehensive option, check out the Neo4j OGM library.
Code example I put together a brief example of how to use the new object mapping feature in a Maven project.</description></item><item><title>Intro to RAG: Foundations of Retrieval Augmented Generation, part 2</title><link>https://jmhreif.com/blog/2025/intro-to-rag-pt2/</link><pubDate>Wed, 30 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/intro-to-rag-pt2/</guid><description>Photo credit In the last post, we discussed the basics of Retrieval Augmented Generation (RAG) and how it enhances the capabilities of Large Language Models (LLMs) by integrating them with external knowledge sources. We also introduced the concept of vector embeddings and their role in semantic search.
In this post, we’ll dive deeper into the different layers of RAG, including vector RAG, graph RAG, and agents. We’ll explore how these layers can be combined to create more powerful and effective AI systems.</description></item><item><title>Intro to RAG: Foundations of Retrieval Augmented Generation, part 1</title><link>https://jmhreif.com/blog/2025/intro-to-rag-foundations/</link><pubDate>Tue, 22 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/intro-to-rag-foundations/</guid><description>Photo credit Retrieval Augmented Generation (RAG) may sound complex, but it accurately represents the process of the system. RAG is a method that enhances the capabilities of Large Language Models (LLMs) by integrating them with external knowledge sources.
Each term represents a piece of the puzzle:
Retrieval - data retrieved from some external source outside the LLM (most often a database, but can include files, webpages, etc)
Augmented - &amp;#34;augmenting&amp;#34; (or adding to) an LLM’s training data.</description></item><item><title>GenAI blood, sweat, and tears: Loading data to Pinecone</title><link>https://jmhreif.com/blog/2025/vector-graph-rag/</link><pubDate>Wed, 09 Apr 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/vector-graph-rag/</guid><description>Photo credit As someone who is pretty familiar with relational and graph databases, I wanted to dig a little deeper into vector databases and understand the strengths and quirks they bring to the database table. I put together a conference abstract on vector RAG versus GraphRAG which got picked up, so I went to work building a demo and learning all I could.
I pivoted a few times along the way, but ended up with a Spring AI application that connects to both Pinecone (vector database) and Neo4j (graph database).</description></item><item><title>How-To: Use Cypher DSL for programmatic queries</title><link>https://jmhreif.com/blog/2025/cypher-dsl-how-to/</link><pubDate>Thu, 06 Feb 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/cypher-dsl-how-to/</guid><description>Photo credit I recently had the opportunity to play with the Cypher DSL (domain-specific language) library, and I found it difficult to figure out syntax for some of the queries I was trying to construct.
This blog post will hopefully help you understand how to construct your own programmatic queries with Cypher DSL by showing you syntax for nodes, relationships, and filtering. Then see how this in action with some examples for assembling those components into full queries translated from common clauses, functions, and result formats in Cypher.</description></item><item><title>Adventures in Git: Resetting repositories when you end up in a mess</title><link>https://jmhreif.com/blog/2025/git-merge-rebase/</link><pubDate>Mon, 27 Jan 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/git-merge-rebase/</guid><description>Photo credit Just when I’m feeling pretty confident about my git skills, I run into a scenario like this one that backpedals my confidence. I keep learning, though, and small improvements are still progress. :)
A few weeks ago, I was working on an update to the Graphacademy Spring Data Neo4j course, and things got out of sync. Before I knew it, I was stuck in merge conflict hell and wondering how I got there and if/how I could ever get out.</description></item><item><title>Spring Data Neo4j: How to update an entity, Part 2</title><link>https://jmhreif.com/blog/2025/sdn-update-methods/</link><pubDate>Fri, 17 Jan 2025 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2025/sdn-update-methods/</guid><description>Photo credit After working on a new online Spring Data Neo4j course, I learned a couple more things about updating an entity. The course required a different set of scenarios than outlined in my previous SDN update blog post, so I wanted to cover those scenarios, as well.
Spring save() method First up is the out-of-the-box save() method that is provided by Spring as a default. This method takes an input of the entity object you want to save to the database.</description></item><item><title>Gear Up for NODES 2024: What to Know</title><link>https://jmhreif.com/blog/2024/gear-up-nodes-2024/</link><pubDate>Wed, 18 Sep 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/gear-up-nodes-2024/</guid><description>Photo credit The NODES 2024 conference is approaching fast, and we have a lot of exciting activities, including talks, workshops, and more. Here’s what you need to know to get ready for NODES 2024.
What is NODES? NODES is a free, virtual conference run by Neo4j for developers, data scientists, and other technical roles who want to learn more about graph databases and how they can be used to solve complex problems.</description></item><item><title>Press the Easy Button: Organize a Virtual Conference Schedule with a Graph Database</title><link>https://jmhreif.com/blog/2024/nodes-2024-schedule/</link><pubDate>Mon, 19 Aug 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/nodes-2024-schedule/</guid><description>Photo credit Every year, Neo4j hosts the virtual event NODES 2024 - a free, technical event spanning global timezones and a variety of graph-related topics. This is one of my favorite events of the year, but it doesn’t happen without countless hours of planning and work to make it valuable to the graph community.
This year, my colleague and I were put in charge of organizing the schedule, determining how sessions are lined up between the start and end time of the event.</description></item><item><title>Spring AI Upgrade: Changes for Applications from 0.8 to 1.0</title><link>https://jmhreif.com/blog/2024/spring-ai-update-10/</link><pubDate>Mon, 22 Jul 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-update-10/</guid><description>Photo credit Migrating an application always feels a bit daunting, and that was the way I felt when I looked at the Spring AI 1.0 milestone release.
However, the upgrade didn’t make as many major shifts as anticipated. This guide will help you upgrade your Spring AI application from version 0.8 to 1.0 and explain why each change is needed. Changes include some naming shifts, configuration options, and more.</description></item><item><title>How to Run Neo4j on Kubernetes</title><link>https://jmhreif.com/blog/2024/kubernetes-neo4j/</link><pubDate>Thu, 13 Jun 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/kubernetes-neo4j/</guid><description>Photo credit For an upcoming event, I was asked to give a demo of how to run Neo4j on Kubernetes. I had very little experience with Kubernetes, so I decided to document my journey for later reference.
What is Kubernetes? Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It was originally developed by Google and is now maintained by the Cloud Native Computing Foundation.</description></item><item><title>GenAI Starter Kit: Everything You Need to Build an Application with Spring AI in Java</title><link>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</link><pubDate>Thu, 23 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-starter-kit/</guid><description>Photo credit There are so many options when it comes to languages, frameworks, and tools for building generative AI (GenAI) applications. When you are just getting started, these decisions and figuring out how to integrate everything can be overwhelming.
My team has been working on some pre-packaged solutions to make this process easier by providing starter kit projects with a few key technologies. One of those is the topic of today’s post - building a GenAI application with Spring AI in Java.</description></item><item><title>NODES 2024: How to Submit a Technical Presentation</title><link>https://jmhreif.com/blog/2024/nodes-2024-cfp/</link><pubDate>Thu, 09 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/nodes-2024-cfp/</guid><description>Photo credit There is no shortage of technical events such as conferences, meetups, trainings, hackathons, and so on. These events are a great way to learn new things, connect with people, and share knowledge with others. One of the most valuable and exciting ways to share knowledge is by giving a technical presentation.
Today, we will look at how to submit a technical presentation for an event and get some personal recommendations from me, as well.</description></item><item><title>Spring AI: How to Write GenAI Applications with Java</title><link>https://jmhreif.com/blog/2024/spring-ai-app/</link><pubDate>Wed, 01 May 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/spring-ai-app/</guid><description>Photo credit Generative AI (GenAI) is currently a hot topic in the tech world. It’s a subset of artificial intelligence that focuses on creating new content, such as text, images, or music. One popular type of GenAI component is the Large Language Model (LLM), which can generate human-like text based on a prompt. Retrieval-Augmented Generation (RAG) is a technique that enhances the accuracy and reliability of generative AI models by grounding them in external knowledge sources.</description></item><item><title>Speaker Resume</title><link>https://jmhreif.com/about/speaking_list/</link><pubDate>Wed, 27 Mar 2024 12:00:00 -0600</pubDate><guid>https://jmhreif.com/about/speaking_list/</guid><description>This page lists events where Jennifer has spoken the last couple of years. She has traveled the world to participate in world-class technical events with audiences large and small.
Speaking provides a way to share her learnings and experiences with others and learn from theirs, as well. Many of her slide decks are available on Jennifer’s SpeakerDeck page or included in her code projects on Github, and recordings of presentations are aggregated to a YouTube playlist.</description></item><item><title>Cypher Sleuthing: How to Get Data Types of Properties in Neo4j</title><link>https://jmhreif.com/blog/2024/cypher-property-data-types/</link><pubDate>Tue, 12 Mar 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/cypher-property-data-types/</guid><description>Photo credit It’s been awhile since I wrote a Cypher Sleuthing post, but I’m back with a new one! This time, I’m going to show you how to find the data types of properties in Neo4j.
I frequently want to find out the data type of a property so that I can map it in an application (in Java). I can never remember off the top of my head, and when I Google the question, the results are often outdated (here’s the answer post, but the syntax is old).</description></item><item><title>Implementing RAG: How to write a graph retrieval query in LangChain</title><link>https://jmhreif.com/blog/2024/rag-demo-retrieval/</link><pubDate>Thu, 15 Feb 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/rag-demo-retrieval/</guid><description>Photo credit What is RAG? This term is used a lot in today’s technical landscape, but what does it actually mean? Here are a few definitions from various sources:
&amp;#34;Retrieval-Augmented Generation (RAG) is the process of optimizing the output of a large language model, so it references an authoritative knowledge base outside of its training data sources before generating a response.&amp;#34; - Amazon Web Services
&amp;#34;Retrieval-augmented generation (RAG) is a technique for enhancing the accuracy and reliability of generative AI models with facts fetched from external sources.</description></item><item><title>How to pass a JSON object to a Spring Boot request</title><link>https://jmhreif.com/blog/2024/sb-pass-json/</link><pubDate>Fri, 12 Jan 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/sb-pass-json/</guid><description>Photo credit Just before the holidays, I was working on writing some more lesson content for a Spring Data Neo4j course. To save an entity to the database, I needed to pass a JSON object containing the entity’s properties to a Spring Boot controller method. Each time I wanted to test the code, I had to manually create the JSON object and pass it to the controller method on the command line.</description></item><item><title>How to migrate Homebrew from Intel chip installation to Apple Silicon</title><link>https://jmhreif.com/blog/2024/brew-migrate-silicon/</link><pubDate>Thu, 04 Jan 2024 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2024/brew-migrate-silicon/</guid><description>Photo credit I have been using an Apple M1 laptop since autumn of 2021, but I just recently came across an issue that surprised me. It seems I hadn’t converted Homebrew (a package manager for macOS) for compatibility with Apple Silicon. I mostly use Homebrew to install packages I rarely use (such as Ruby or Python libraries), so perhaps that’s why I hadn’t noticed. However, this issue surfaced because I tried to install a Python package (Poetry) to work on a generative AI project, and it was looking for Python in the wrong place.</description></item><item><title>JBang: How to script with Java for data import from an API</title><link>https://jmhreif.com/blog/2023/jbang-api-import/</link><pubDate>Thu, 02 Nov 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2023/jbang-api-import/</guid><description>Photo credit It’s right in the middle of busy conference season, and I was prepping for an upcoming conference talk.
As I often do, I went to Neo4j Aura to spin up a free database and use Cypher with APOC to import data from an API, but this API requires a header, and the APOC procedure that adds headers to a request is blocked by security in Aura. Hm, I needed a new route.</description></item><item><title>Verify Connectivity: How to Check the Neo4j Connection from a Spring Boot Application</title><link>https://jmhreif.com/blog/2023/sdn-verifyconnectivity/</link><pubDate>Fri, 08 Sep 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2023/sdn-verifyconnectivity/</guid><description>Photo credit I have recently been working on a self-paced learning course for Spring Data Neo4j and wanted users to be able to test the database connection. Typically, in a Spring Boot application with Spring Data, you set the database credentials as properties in the application.properties file. You can run the application with just these details, but it only fails when the database URI has improper syntax. The application does not actually test the connection to see if it is valid and successfully connects.</description></item><item><title>ServiceUnavailableException: Connection to the database terminated.</title><link>https://jmhreif.com/blog/2023/sdn-service-unavailable-exception/</link><pubDate>Tue, 15 Aug 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2023/sdn-service-unavailable-exception/</guid><description>Photo credit I was working on a Spring Data Neo4j example application for a community user’s question, and I kept running into the error below when I defined bidirectional relationship in the domain classes.
2023-08-10T13:00:17.341-05:00 ERROR 98493 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.TransientDataAccessResourceException: Server at 408637a4.databases.neo4j.io:7687 is no longer available; Error code &amp;#39;N/A&amp;#39;] with root cause org.</description></item><item><title>How to Create a Spring Boot Application to Retrieve Data from Evernote</title><link>https://jmhreif.com/blog/2023/evernote-api-app/</link><pubDate>Tue, 01 Aug 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2023/evernote-api-app/</guid><description>Photo credit I recently started work on a joint project with my colleague, Jason Koo. For this project, we want to import data from second brain apps (such as Obsidian, Notion, Evernote, etc) to Neo4j. Since I use Evernote, I was tasked with getting my notes out of Evernote. In this post, I will show you how to use the Evernote API and SDK in a Spring Boot application to retrieve data from Evernote.</description></item><item><title>Spring Data Neo4j: How to update an entity</title><link>https://jmhreif.com/blog/2023/sdn-cypher-update-entity/</link><pubDate>Thu, 01 Jun 2023 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2023/sdn-cypher-update-entity/</guid><description>Photo credit As I was incorporating Kafka to my microservices project, I ran across some trouble updating an entity in Neo4j using Spring Data Neo4j.
My data set contains books, authors, book reviews, and users. Based on a new review getting entered into the system, I want to create that review, and then update the related Book entity with an incremented review count and calculate a new average rating. The new review entity was being created with no issues, but I was struggling to get the update to the related Book entity working.</description></item><item><title>NoSuchBeanDefinitionException: No matching TransactionManager bean found for qualifier 'reactiveTransactionManager'</title><link>https://jmhreif.com/blog/2022/no-such-bean-definition-exception/</link><pubDate>Tue, 13 Dec 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/no-such-bean-definition-exception/</guid><description>Photo credit I was working on a Spring Data Neo4j microservice application to add a write method for saving a new book review to the database, when I came across the error message below.
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named &amp;#39;reactiveTransactionManager&amp;#39; available: No matching TransactionManager bean found for qualifier &amp;#39;reactiveTransactionManager&amp;#39; - neither qualifier match nor bean name match! The stacktrace was long and ugly, and I had come across this error before…​but I could not remember how I had solved it.</description></item><item><title>Journeys in Java, Level 10: Service Discovery with Eureka</title><link>https://jmhreif.com/blog/2022/microservices-level10/</link><pubDate>Tue, 01 Nov 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level10/</guid><description>Photo credit Gaining complexity in a microservices system certainly isn’t for the faint of heart (though neither is complexity in monoliths!). When there are many services that need to communicate with one another, we might need to coordinate multiple services communicating with multiple other services. We also might code for varying environments such as local, development server, or the cloud.
How do services know where to find one another? How can we avoid problems when a service is unavailable?</description></item><item><title>Journeys in Java, Level 9: Docker compose all the things</title><link>https://jmhreif.com/blog/2022/microservices-level9/</link><pubDate>Wed, 21 Sep 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level9/</guid><description>Photo credit Our microservices project contains quite a few pieces now. We have two databases, three API services, a user-view service for books, and a service to host our configuration. With so many pieces to manage, it would be nice to have something that orchestrates the individual services into a system, such as Docker Compose.
Back in our Level 5 rendition, we did exactly this for our smaller version of the project.</description></item><item><title>Journeys in Java, Level 8: Add MongoDB to Spring Cloud Config</title><link>https://jmhreif.com/blog/2022/microservices-level8/</link><pubDate>Mon, 08 Aug 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level8/</guid><description>Photo credit In our last blog post, we used Spring Cloud Config to provide database credentials to a microservice application connecting to a cloud-hosted Neo4j database. This post will backport this concept to our existing MongoDB database instance and its related microservices.
We will add our MongoDB credentials to the config server, so that it will be the central place for both our Neo4j and MongoDB database access. However, each service only has access to the credentials that it needs to operate, which provides some level of security through &amp;#34;separation of concerns&amp;#34; (versus universal access).</description></item><item><title>Journeys in Java, Level 7: Externalize Microservice Configuration</title><link>https://jmhreif.com/blog/2022/microservices-level7/</link><pubDate>Thu, 14 Jul 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level7/</guid><description>Photo credit Our decided next step for this project takes us in a new direction by adding externalized configuration for our applications. We already saw how to do something similar with MongoDB database credentials in Docker Compose to access a local database container, but what do we do when the database is hosted on public cloud or contains sensitive data? We probably don’t want to publish our credentials anywhere or even prevent accidental publishing.</description></item><item><title>Journeys in Java, Level 6: Build a Microservice with Neo4j</title><link>https://jmhreif.com/blog/2022/microservices-level6/</link><pubDate>Tue, 21 Jun 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level6/</guid><description>Photo credit For our next adventure in Java microservices, we want to expand our system for book review data. While books and authors are well-suited for a document database such as MongoDB, once you add reviews to the mix, the importance of the relationships makes this project better suited for a graph database. This way, we can utilize relationships between the different entities to improve analysis based on the structure of the connections.</description></item><item><title>Journeys in Java, Level 5: Manage Microservices with Docker Compose</title><link>https://jmhreif.com/blog/2022/microservices-level5/</link><pubDate>Thu, 21 Apr 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level5/</guid><description>Photo credit We continue building our microservices system by adding a coordination layer to handle spinning multiple services up and down. In previous blog posts, we grew from two Spring Boot applications to three applications + a database container. As we continue to scale and broaden our system, we will need something to coordinate service and ensure consistent communication (avoid human error).
We will do this through docker-compose, an orchestration tool that manages containerized applications.</description></item><item><title>Journeys in Java, Level 4: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/2022/microservices-level4/</link><pubDate>Thu, 31 Mar 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level4/</guid><description>Photo credit This blog post is the fourth iteration in a series of posts about building microservices in Java. The initial post started with a single string message passed between two locally-running applications, and we are gradually adding services and functionality along the way.
In this level 4 installment, we will add a new service that will manage book authors. It will call a database containing a data domain of books and retrieve authors and their information.</description></item><item><title>Data Tool Decision Tree: Reduce Data Cleaning Time</title><link>https://jmhreif.com/blog/2022/data-cleaning-goodreads/</link><pubDate>Wed, 23 Mar 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/data-cleaning-goodreads/</guid><description>Photo credit My dad likes to say that cooking is another form of creativity - part art, part science - that produces something physical, edible, and enjoyable with the chef’s unique style. Programming can be similar (minus the edible part).
To learn to cook, you can take classes or read books, but the best teacher is rolling up your sleeves and experimenting yourself. When should you choose this utensil or that?</description></item><item><title>Journeys in Java, Level 3: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/2022/microservices-level3/</link><pubDate>Fri, 11 Feb 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level3/</guid><description>Photo credit We are still in the beginning stages of building microservices with Java, but we have already seen how to send and receive communications between two Spring Boot applications. In the first blog post of this series, our two applications transmitted a message string of &amp;#34;Hello, World!&amp;#34;. In the second blog post, we took it one step further by embedding a MongoDB database into our service1, added a data domain (books) with four pre-populated entries, and transmitted the Book information between the two applications.</description></item><item><title>Journeys in Java, Level 2: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/2022/microservices-level2/</link><pubDate>Thu, 27 Jan 2022 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2022/microservices-level2/</guid><description>Photo credit In my last blog post, we began building microservices in Java with two Spring Boot applications, passing a &amp;#34;Hello, World!&amp;#34; string from one application to the other. We focused on reduced complexity, minimum previous knowledge, and few components. Next, we can slowly add pieces that simulate microservices projects in the real world.
One way to do this is by adding a data domain. Applications often model some scenario in the real world such as maintaining office building temperatures, finding connected devices on a network, or recommending a tv show.</description></item><item><title>Journeys in Java, Level 1: Building an Empire of Microservices</title><link>https://jmhreif.com/blog/2021/microservices-level1/</link><pubDate>Tue, 21 Dec 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/microservices-level1/</guid><description>Photo credit Microservices have been used and deployed in businesses and projects for awhile, and there is plenty of content available for architecting them into a system. For my next project, I want to dive into the world of microservices and begin building my own little virtual empire from different kinds of services to find out the complexities, best practices, power, and trouble that comes with them. I will share all my learnings along the way, as well.</description></item><item><title>What I Learned Going from Intel to Apple Silicon</title><link>https://jmhreif.com/blog/2021/docker-intel-to-m1/</link><pubDate>Thu, 04 Nov 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/docker-intel-to-m1/</guid><description>Photo credit Earlier this year, I received a new work laptop with the recent Apple silicon chip (versus Intel chip). The new M1 has been critically examined with avid enthusiasm and criticism, so I wasn’t sure what my outcome would be.
Thus far, it’s been positive, and I really haven’t noticed too much disruption in my work. Things have been faster, but I’m not sure whether to entirely attribute that new chip itself, or just the new machine, in general.</description></item><item><title>Container Upgrade - Experiences Updating Three Databases</title><link>https://jmhreif.com/blog/2021/docker-container-upgrade/</link><pubDate>Fri, 15 Oct 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/docker-container-upgrade/</guid><description>Photo credit *Updated Dec 16, 2021
I created a demo project a couple of years ago that included a lot of technical setup - containers, data import, queries, and such. I presented it for a conference or two, and while it was one of my favorite projects, it was a lot of preparation for the live demo.
I recently rediscovered the project, and submitted it to a couple of conferences.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 3</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part3/</link><pubDate>Wed, 22 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part3/</guid><description>Photo credit You may have heard quite a bit of buzz around reactive programming or reactive principles in recent months or years. Some people say it is the future, while others prefer their existing monoliths. So what is all the fuss actually about? What is reactive? Is it beneficial?
As with all things in life, it depends. :) Remember, that technical decisions are often large investments of time - resources to create it and/or maintain for lengths of time.</description></item><item><title>Java 17: Explore the newly-released Java version in a graph database!</title><link>https://jmhreif.com/blog/2021/java17-graph-explore/</link><pubDate>Tue, 14 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/java17-graph-explore/</guid><description>Photo credit I’ve recently been playing around with a JDK data set that details the historical library changes of the versions of Java, and with the release of Java 17 today (September 14!), I thought it would be a good time to explore this data set a bit more with others. I invite you to join me and to continue with additional exploration and projects!
The data set is pulled from a Marc Hofman’s Github repository for the Java Almanac that also feeds a web browser version for the javaalmanac.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 2</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part2/</link><pubDate>Thu, 09 Sep 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part2/</guid><description>Photo credit Our previous post (Part 1) on this topic introduced us to Spring Data Neo4j and showed the architectural differences between version 5 and the latest version 6. This post begins the migration process by taking a Spring Data Neo4j 5 application with OGM and upgrades to the dependencies and syntax changes of Spring Data Neo4j 6.
Without further ado, let’s dive in!
Current application overview The code for today’s migration is a specific branch in the migration Github repository.</description></item><item><title>Winter to Spring: Migrating from Spring Data Neo4j 5 to 6, Part 1</title><link>https://jmhreif.com/blog/2021/migrate-sdn-part1/</link><pubDate>Thu, 12 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/migrate-sdn-part1/</guid><description>Photo credit A major upgrade to Spring Data Neo4j was released at the end of last year as part of the Spring Data release train. If you were involved in Spring Data and Neo4j news before that, you may have seen hints of this coming with the SDN/RX library entering the scene in late 2019. The library brought with it a lighter footprint, as well as a more straightforward implementation of features to reduce confusion and errors (therefore also improving efficiency) in development and production.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 5</title><link>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part5/</link><pubDate>Tue, 10 Aug 2021 09:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part5/</guid><description>From part 1 introducing Cypher dates and formats to part 4 where we combined duration functions and temporal components to translate amounts in one unit to another unit, we have covered a lot of ground in this series! Filling in the gaps, part 2 showed us how to truncate dates for searches and use durations for adding/subtracting amounts of time, and part 3 gave us an intro to temporal components and translations within component groups.</description></item><item><title>Create a Data Marvel with Spring Data Neo4j</title><link>https://jmhreif.com/blog/2021/create-data-marvel-sdn/</link><pubDate>Mon, 02 Aug 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/create-data-marvel-sdn/</guid><description>Photo credit I have had a couple of Github projects demonstrating bits of functionality for Spring Data Neo4j, but they had last been updated in 2020 when the new Spring Data Neo4j 6 was still a beta version known as SDN/RX. Since there have been several changes since then, I thought I would give the projects a refresh and make them current.
Project code:
SDN Marvel (imperative)
SDN(rx) Marvel (reactive)</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 4</title><link>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part4/</link><pubDate>Tue, 27 Jul 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part4/</guid><description>Photo credit *Updated Dec 15, 2021
My previous part 1, part 2, and part 3 posts on this topic introduced Cypher dates, translated formats to the Cypher-supported ISO 8601 format, calculated durations, accessed components, and translated durations to certain values.
If you read those, then this post is the next post showing how to convert durations across component categories. If you haven’t read the previous posts leading up to this one, feel free to catch up (recommend at least Part 3 as this post’s prequel) - though it isn’t required.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 3</title><link>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part3/</link><pubDate>Thu, 01 Jul 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part3/</guid><description>*Updated Dec 9, 2021
My previous part 1 and part 2 posts on this topic introduced Cypher dates, translated formats to the Cypher-supported ISO 8601 format, calculated durations, and measured lengths of time. If you read those, then this post is the next step with Cypher dates on date components, component translations, and duration conversions. If you haven’t read parts 1 or 2, feel free to catch up - though this post doesn’t require the previous ones.</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 2</title><link>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part2/</link><pubDate>Mon, 26 Apr 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part2/</guid><description>*Updated Dec 9, 2021
My previous part 1 post on this topic introduced Cypher dates and translated a few other date formats to the Cypher-supported ISO 8601 format. If you read that, then this post is the next step with Cypher dates that covers durations and more. If you haven’t seen part 1, feel free to catch up - though this part 2 doesn’t necessarily require reading part 1. :)</description></item><item><title>Cypher Sleuthing: Dealing with Dates, Part 1</title><link>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part1/</link><pubDate>Fri, 09 Apr 2021 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2021/cypher-sleuthing-dates-part1/</guid><description>No matter what database, programming language, or webpage you might be using, dates always seem to cause headaches. Different date formats require calculations between application date pickers in user-friendly formats and system dates in backend devices and data sources. Then, programming languages each have their own libraries and structures for dealing with dates, too.
This concept in the Neo4j ecosystem isn’t any less complex with Cypher (a graph query language) date formats, the APOC library date functions/procedures, and countless possible integration tools/APIs for data import and export.</description></item><item><title>In the Language Wars, Java Holds Its Own</title><link>https://jmhreif.com/blog/2019/java-holds-its-own/</link><pubDate>Mon, 18 Nov 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2019/java-holds-its-own/</guid><description>We all pick our favorites and downplay other options (colors, cars, sports team, etc.). Programming language choice is not exempt. Whether it’s the one we are most comfortable with or the one that got us a job, we cling to that choice.
Today, we will focus on Java. There are perfectly valid complaints and praises for this language, and we will cover them. As always, these are my experiences, so others may see things differently.</description></item><item><title>Cypher Sleuthing: the CASE statement</title><link>https://jmhreif.com/blog/2019/cypher-sleuthing-case-statement/</link><pubDate>Wed, 24 Jul 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2019/cypher-sleuthing-case-statement/</guid><description>I was recently working on one of our developer guides (the CSV import guide) and came across some Cypher I needed to fine-tune in the CASE statement on that page. I had some trouble finding the correct syntax, so I reached out to some Cypher experts to get some help.
As it turns out, I was looking at the Cypher CASE statement the wrong way and misunderstood its structure and design.</description></item><item><title>Cypher Sleuthing: the EAGER operator</title><link>https://jmhreif.com/blog/2019/cypher-sleuthing-eager-operator/</link><pubDate>Wed, 24 Jul 2019 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2019/cypher-sleuthing-eager-operator/</guid><description>Why is it that some query syntax seems to run faster than another when there is very little difference between the statements? Sometimes, queries will invoke what is called the eager operator in order to maintain consistent operations and avoid conflicting data changes.
It still leaves the question, though, of what does this eager operation do differently and why would it be important enough to specifically avoid in certain situations?</description></item><item><title>Getting Past Beginner Stage: How to Get to Intermediate</title><link>https://jmhreif.com/blog/2018/how-to-get-to-intermediate/</link><pubDate>Thu, 18 Oct 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2018/how-to-get-to-intermediate/</guid><description>When you start a new technology or learn anything new, it might be easy to get started. There is often a lot of starter material, tutorials, guides, exercises, and entry-level project examples. Plus, you might even find blog posts, StackOverflow questions, and other types of materials to help you.
The on-boarding process for new technologies continues to get simpler and easier. But what happens when you understand and can tackle all the beginner-level materials?</description></item><item><title>How to Build a Career: Telling Your Story</title><link>https://jmhreif.com/blog/2018/how-to-build-a-career/</link><pubDate>Fri, 31 Aug 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2018/how-to-build-a-career/</guid><description>Oftentimes, we tend to sell ourselves short when we are talking to interviewers, professionals, or other career authorities.
We don’t want to seem arrogant and inflate our capabilities, right? What if they don’t see the value of our journey that we see from our path, decisions, experiences, etc? There is a very fine balance between being humble and arrogant, and it is a tough one to achieve.
We all have different backgrounds, achievements, struggles, and experiences.</description></item><item><title>How Do You Know If a Graph Database Solves the Problem?</title><link>https://jmhreif.com/blog/2018/how-do-you-know-if-graph-database-solves-the-problem/</link><pubDate>Wed, 08 Aug 2018 11:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2018/how-do-you-know-if-graph-database-solves-the-problem/</guid><description>One of the greatest questions to consistently badger a developer is &amp;#34;what technology should I use?&amp;#34;. The analysis from days of thought and input determines which option(s) (from an increasingly growing number) best suits the need, manages volume and demand, plans for long-term strategy, simplifies/reduces support, and gets approved by colleagues and management.
This may sound even simpler than it sometimes can be in real life. The decision’s complexity is often compounded by how much buy-in is needed, and the current constraints of existing technology and developer knowledge.</description></item><item><title>What I've Learned in 5 Years as a Developer</title><link>https://jmhreif.com/blog/2018/five-years-as-a-developer/</link><pubDate>Wed, 23 May 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2018/five-years-as-a-developer/</guid><description>As I approach my 5-year anniversary in my career as a developer, I wanted to reflect on what I have learned up to this point. While I still have much to learn (one constant in life), there are some things I have found in my experiences thus far.
Everyone treks a different path filled with vastly different experiences, so you may relate to some of these or simply add to the list of possibilities you may or may not encounter along the road.</description></item><item><title>What is so exciting about a career in software development?</title><link>https://jmhreif.com/blog/2018/career-in-software-development/</link><pubDate>Wed, 28 Mar 2018 12:00:00 -0600</pubDate><guid>https://jmhreif.com/blog/2018/career-in-software-development/</guid><description>Photo credit What is so exciting about a career in software development? There must be something that makes the blood-shot eyes, sleepless nights, and coffee-bolstered being worthwhile. While stressing over deadlines, fixing code bugs, and balancing personal life, some part of the true developer in us keeps chugging along, having faith that the reward is far greater than each obstacle.
Whether you are a young student choosing a career in an endless array of possibilities, an individual stuck in another career looking to make a switch, or a seasoned professional trying to remind yourself of the highlights in a career of software development, I hope there is something in this post for you that encourages you to thrive in your software development career and to bask in the light at the end of each tunnel.</description></item></channel></rss>